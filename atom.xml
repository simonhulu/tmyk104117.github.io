<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Developer Path]]></title>
  <link href="http://tmyk104117.github.io/atom.xml" rel="self"/>
  <link href="http://tmyk104117.github.io/"/>
  <updated>2016-03-25T19:15:47+08:00</updated>
  <id>http://tmyk104117.github.io/</id>
  <author>
    <name><![CDATA[张诗杰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[好长时间没写博客了]]></title>
    <link href="http://tmyk104117.github.io/blog/2016/03/25/new-post/"/>
    <updated>2016-03-25T19:03:09+08:00</updated>
    <id>http://tmyk104117.github.io/blog/2016/03/25/new-post</id>
    <content type="html"><![CDATA[<p>总是三分钟热度,这个很困扰我</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS UIViewController 的生命周期]]></title>
    <link href="http://tmyk104117.github.io/blog/2016/01/08/uiviewcontroller-lifecycle/"/>
    <updated>2016-01-08T11:28:14+08:00</updated>
    <id>http://tmyk104117.github.io/blog/2016/01/08/uiviewcontroller-lifecycle</id>
    <content type="html"><![CDATA[<p>UIViewController可能是IOS SDK里面用到最多的Object了,所以很重要的是去理解生命周期事件和怎样去使用它们</p>

<p><strong> 1.生命周期事件顺序 </strong>    <br/>
1.</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">loadView</span></code></pre></div>


<ol>
<li></li>
</ol>


<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span></code></pre></div>


<ol>
<li></li>
</ol>


<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillAppear</span></code></pre></div>


<ol>
<li></li>
</ol>


<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillLayoutSubviews</span></code></pre></div>


<ol>
<li></li>
</ol>


<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLayoutSubviews</span></code></pre></div>


<ol>
<li></li>
</ol>


<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear</span></code></pre></div>


<p><strong> 2.我们在这些事件里面应该干什么呢? </strong>   <br/>
*</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">loadView</span></code></pre></div>


<p>&mdash;&ndash;创建controller管理的views<br/>
      这个函数只有在view controller创建程序完成时才会调用,你可以覆盖该方法去手动创建你自己的子view     <br/>
*</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span></code></pre></div>


<p>&mdash;&ndash;当view被load进内存的时候调用<br/>
      当viewController的view创建时调用,记住这个时候view的bounds还不是最终的值，这里是做初始化init和启动一些object的好地方<br/>
*</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillAppear</span></code></pre></div>


<p>&mdash;-通知view controller   它的view被添加到view显示树上 <br/>
      当view被显示到屏幕上的时候被调用,这个时候view的bounds已经被确定了,但是旋转方向还没有确定,这个函数每次被显示的时候都会被调用，这里不要放那些只需要执行一次的代码   <br/>
*</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillLayoutSubviews</span></code></pre></div>


<p>&mdash;- 通知view controller布局它的subviews    <br/>
      这个方法在每次frame变化时或者方向旋转时都会被标记为需要layout,这是<strong>bounds被确定的的第一步</strong>如果你没有使用自动布局或者你可以在这里改变你subviews的布局       <br/>
*</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLayoutSubviews</span></code></pre></div>


<p>&mdash;-通知view controller它已经布局了它的subviews   <br/>
      你可以在这里添加一些改变布局的代码  <br/>
*</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear</span></code></pre></div>


<p> &mdash;-通知view controller 被添加到显示树
      这里是一个执行跟显示view相关额外任务的好地方,例如动画,这个方法会在显示动画完成调用,所以到了这一步view已经被用户看到了,在某些情况下,这里还是load data和send request的好地方</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cordova学习之CDVAvailabilityDeprecated.h]]></title>
    <link href="http://tmyk104117.github.io/blog/2016/01/08/cordova/"/>
    <updated>2016-01-08T10:14:24+08:00</updated>
    <id>http://tmyk104117.github.io/blog/2016/01/08/cordova</id>
    <content type="html"><![CDATA[<p>该文件定义了一个宏,用来显示过期了的api,先判断是否是clang编译器</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="cp">#ifdef __clang__</span>
<span class="cp">#define CDV_DEPRECATED(version, msg) __attribute__((deprecated(&quot;Deprecated in Cordova &quot; #version &quot;. &quot; msg)))</span>
<span class="cp">#else</span>
<span class="cp">#define CDV_DEPRECATED(version, msg) __attribute__((deprecated()))</span>
<span class="cp">#endif</span></code></pre></div>


<p>然后声明了两个内联函数 CDV_IsIPad,CDV_IsIPhone5判断设备,我们可以学习到 如何声明一个过期的api</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="k">static</span> <span class="kr">inline</span> <span class="kt">BOOL</span> <span class="nf">CDV_IsIPad</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">CDV_DEPRECATED</span><span class="p">(</span><span class="mf">3.7.0</span><span class="p">,</span> <span class="s">&quot;This will be removed in 4.0.0&quot;</span><span class="p">);</span>
<span class="k">static</span> <span class="kr">inline</span> <span class="kt">BOOL</span> <span class="nf">CDV_IsIPhone5</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">CDV_DEPRECATED</span><span class="p">(</span><span class="mf">3.7.0</span><span class="p">,</span> <span class="s">&quot;This will be removed in 4.0.0&quot;</span><span class="p">);</span></code></pre></div>


<p>然后还可以学习到如何判断ipad和特定的iphone</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="k">static</span> <span class="kr">inline</span> <span class="kt">BOOL</span> <span class="nf">CDV_IsIPad</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[[</span><span class="bp">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">userInterfaceIdiom</span><span class="p">)]</span> <span class="o">&amp;&amp;</span> <span class="p">[[</span><span class="bp">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">userInterfaceIdiom</span><span class="p">]</span> <span class="o">==</span> <span class="n">UIUserInterfaceIdiomPad</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kr">inline</span> <span class="kt">BOOL</span> <span class="nf">CDV_IsIPhone5</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">([[</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">].</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">==</span> <span class="mi">568</span> <span class="o">&amp;&amp;</span> <span class="p">[[</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">].</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">==</span> <span class="mi">320</span><span class="p">)</span> <span class="o">||</span> <span class="p">([[</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">].</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">==</span> <span class="mi">568</span> <span class="o">&amp;&amp;</span> <span class="p">[[</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">].</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">==</span> <span class="mi">320</span><span class="p">);</span>
<span class="p">}</span></code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016学习计划]]></title>
    <link href="http://tmyk104117.github.io/blog/2016/01/05/2016studyplan/"/>
    <updated>2016-01-05T14:27:56+08:00</updated>
    <id>http://tmyk104117.github.io/blog/2016/01/05/2016studyplan</id>
    <content type="html"><![CDATA[<p>打算在新的一年里面学习一下hybird开发
打算分两步走
1.学习hybird框架 暂定的是apache的cordova
2.学习css</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C中使用sqlite3]]></title>
    <link href="http://tmyk104117.github.io/blog/2016/01/05/sqlite3-in-oc/"/>
    <updated>2016-01-05T11:39:17+08:00</updated>
    <id>http://tmyk104117.github.io/blog/2016/01/05/sqlite3-in-oc</id>
    <content type="html"><![CDATA[<p>1.打开数据库
使用sqlite3_open
2.查询数据库
 每一次使用sql语句查询 使用sqlite3_prepare_v2创建一个sqlite3_stmt.</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="n">sqlite3_stmt</span> <span class="o">*</span><span class="n">stmt</span> <span class="o">=</span> <span class="nb">NULL</span> <span class="p">;</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">sqlite3_prepare_v2</span><span class="p">(</span><span class="n">_db</span><span class="p">,</span> <span class="n">sql</span><span class="p">.</span><span class="n">UTF8String</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stmt</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">!=</span> <span class="n">SQLITE_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_errorLogsEnabled</span><span class="p">)</span> <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%s line:%d sqlite stmt prepare error (%d): %s&quot;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">sqlite3_errmsg</span><span class="p">(</span><span class="n">_db</span><span class="p">));</span>
        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="p">}</span></code></pre></div>


<p> 然后使用sqlite3_bind_text和sqlite3_bind_int,sqlite3_bind_blob插入数据到sqlite3_stmt 实例</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="c1">//stmt是上文得到的stmt ,index是你需要插入的参数值的索引,key是你的参数值,-1是填入的字符长度-1表示到/0结束,NULL表示完成后如何释放</span>
    <span class="n">sqlite3_bind_text</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="n">index</span> <span class="p">,</span> <span class="n">key</span><span class="p">.</span><span class="n">UTF8String</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span></code></pre></div>


<p>3 得到结果
 然后使用sqlite3_step函数执行2步骤里面的stmt ，会返回SQLITE_BUSY, SQLITE_DONE, SQLITE_ROW等消息
如果是SQLITE_ROW 则使用sqlite3_column_text或者其他类型的sqlite3_column得到返回的这一row的对应的值</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="k">do</span><span class="p">{</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">sqlite3_step</span><span class="p">(</span><span class="n">stmt</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">SQLITE_ROW</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//得到这一行的数据</span>
            <span class="kt">char</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">sqlite3_column_text</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="n">i</span><span class="o">++</span><span class="p">);</span>
            <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">sqlite3_column_text</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="n">i</span><span class="o">++</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">sqlite3_column_int</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="n">i</span><span class="o">++</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">SQLITE_DONE</span><span class="p">){</span>
            <span class="c1">//完成</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="c1">//error</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C 运行时相关知识]]></title>
    <link href="http://tmyk104117.github.io/blog/2015/12/31/post-title/"/>
    <updated>2015-12-31T16:08:53+08:00</updated>
    <id>http://tmyk104117.github.io/blog/2015/12/31/post-title</id>
    <content type="html"><![CDATA[<p>1.动态添加方法到某个类
1.1 首选创建一个IMP
例如:</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="bp">UIColor</span> <span class="o">*</span> <span class="nf">tttttttt</span><span class="p">(</span><span class="kt">id</span> <span class="nb">self</span><span class="p">,</span><span class="kt">SEL</span> <span class="n">cmd</span><span class="p">,</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span><span class="p">){</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">str</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
<span class="p">}</span></code></pre></div>


<p>1.2 首先获得Class实例</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="kt">Class</span> <span class="n">newClass</span> <span class="o">=</span> <span class="nl">NSClassFromString</span><span class="p">:(</span><span class="s">@&quot;NSColor&quot;</span><span class="p">);</span></code></pre></div>


<p>1.3 运行class_addMethod方法</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="n">class_addMethod</span><span class="p">(</span><span class="n">newClass</span><span class="p">,</span><span class="k">@selector</span><span class="p">(</span><span class="nl">testMethod</span><span class="p">:),(</span><span class="kt">IMP</span><span class="p">)</span><span class="n">ttt</span><span class="p">,</span><span class="s">&quot;@@:&quot;</span><span class="p">);</span>
<span class="kt">id</span> <span class="n">instance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">newClass</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithDomain</span><span class="p">:</span><span class="s">@&quot;some domain&quot;</span> <span class="nl">code</span><span class="p">:</span><span class="mi">0</span> <span class="nl">userInfo</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
<span class="bp">UIColor</span> <span class="o">*</span><span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="n">instance</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">testMetaClass</span><span class="p">:)</span> <span class="nl">withObject</span><span class="p">:</span><span class="s">@&quot;1231111111111&quot;</span><span class="p">];</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">color</span><span class="p">);</span></code></pre></div>


<p>2.动态添加属性
2.1如果实现了NSKeyValueCoding 协议可以使用</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">[</span><span class="nl">setValue</span><span class="p">:</span><span class="kt">id</span> <span class="n">obj</span> <span class="nl">forUndefinedKey</span><span class="p">:</span><span class="kt">id</span> <span class="n">key</span><span class="p">]</span><span class="err">和</span><span class="p">[</span><span class="nl">valueForUndefinedKey</span><span class="p">:</span><span class="kt">id</span> <span class="n">key</span><span class="p">]</span></code></pre></div>


<p>配合使用
2.2使用 objc_getAssociatedObject
运行时方法，通常添加一个category来添加</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="k">@implementation</span> <span class="bp">NSObject</span>
<span class="nl">(ExampleCategoryWithProperty)</span> <span class="k">@dynamic</span> <span class="n">objectTag</span><span class="p">;</span> <span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">objectTag</span> <span class="p">{</span>
<span class="k">return</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">ObjectTagKey</span><span class="p">);</span> <span class="p">}</span> <span class="o">-</span>
<span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setObjectTag</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span><span class="n">newObjectTag</span> <span class="p">{</span>
<span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">ObjectTagKey</span><span class="p">,</span>
<span class="n">newObject</span><span class="p">,</span><span class="n">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span><span class="p">);</span> <span class="p">}</span></code></pre></div>


<p>2.3
因为运行时不能添加实例变量,如果你有添加实例变量 可以这么做</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="cp">#include  </span>
<span class="cp">#import  </span>
<span class="k">@interface</span> <span class="nc">SomeClass</span> : <span class="bp">NSObject</span> <span class="p">{</span> 
 <span class="bp">NSString</span> <span class="o">*</span><span class="n">_privateName</span><span class="p">;</span> 
<span class="p">}</span>
<span class="k">@end</span> 
<span class="k">@implementation</span> <span class="nc">SomeClass</span> 
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span> 
 <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span> 
 <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="n">_privateName</span> <span class="o">=</span> <span class="s">@&quot;Steve&quot;</span><span class="p">;</span>
  <span class="k">return</span> <span class="nb">self</span><span class="p">;</span> 
<span class="p">}</span> 
<span class="k">@end</span> 
<span class="bp">NSString</span> <span class="o">*</span><span class="n">nameGetter</span><span class="p">(</span><span class="kt">id</span> <span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">)</span> <span class="p">{</span> 
 <span class="n">Ivar</span> <span class="n">ivar</span> <span class="o">=</span> <span class="n">class_getInstanceVariable</span><span class="p">([</span><span class="n">SomeClass</span> <span class="k">class</span><span class="p">],</span> <span class="s">&quot;_privateName&quot;</span><span class="p">);</span> 
 <span class="k">return</span> <span class="nf">object_getIvar</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">ivar</span><span class="p">);</span> 
<span class="p">}</span> 
 <span class="kt">void</span> <span class="n">nameSetter</span><span class="p">(</span><span class="kt">id</span> <span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">newName</span><span class="p">)</span> <span class="p">{</span> 
 <span class="n">Ivar</span> <span class="n">ivar</span> <span class="o">=</span> <span class="n">class_getInstanceVariable</span><span class="p">([</span><span class="n">SomeClass</span> <span class="k">class</span><span class="p">],</span> <span class="s">&quot;_privateName&quot;</span><span class="p">);</span> 
 <span class="kt">id</span> <span class="n">oldName</span> <span class="o">=</span> <span class="n">object_getIvar</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">ivar</span><span class="p">);</span> 
 <span class="k">if</span> <span class="p">(</span><span class="n">oldName</span> <span class="o">!=</span> <span class="n">newName</span><span class="p">)</span> <span class="n">object_setIvar</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">ivar</span><span class="p">,</span> <span class="p">[</span><span class="n">newName</span> <span class="k">copy</span><span class="p">]);</span>
 <span class="p">}</span>
 <span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span> 
 <span class="k">@autoreleasepool</span> <span class="p">{</span> 
 <span class="kt">objc_property_attribute_t</span> <span class="n">type</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;T&quot;</span><span class="p">,</span> <span class="s">&quot;@&quot;</span><span class="bp">NSString</span><span class="s">&quot;&quot;</span> <span class="p">};</span> 
 <span class="kt">objc_property_attribute_t</span> <span class="n">ownership</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;C&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span> <span class="p">};</span> <span class="c1">// C = copy </span>
 <span class="kt">objc_property_attribute_t</span> <span class="n">backingivar</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;V&quot;</span><span class="p">,</span> <span class="s">&quot;_privateName&quot;</span> <span class="p">};</span> 
 <span class="kt">objc_property_attribute_t</span> <span class="n">attrs</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="n">type</span><span class="p">,</span> <span class="n">ownership</span><span class="p">,</span> <span class="n">backingivar</span> <span class="p">};</span> <span class="n">class_addProperty</span><span class="p">([</span><span class="n">SomeClass</span> <span class="k">class</span><span class="p">],</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="n">attrs</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> 
<span class="n">class_addMethod</span><span class="p">([</span><span class="n">SomeClass</span> <span class="k">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="p">(</span><span class="kt">IMP</span><span class="p">)</span><span class="n">nameGetter</span><span class="p">,</span> <span class="s">&quot;@@:&quot;</span><span class="p">);</span> <span class="n">class_addMethod</span><span class="p">([</span><span class="n">SomeClass</span> <span class="k">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">setName</span><span class="p">:),</span> <span class="p">(</span><span class="kt">IMP</span><span class="p">)</span><span class="n">nameSetter</span><span class="p">,</span> <span class="s">&quot;v@:@&quot;</span><span class="p">);</span> 
<span class="kt">id</span> <span class="n">o</span> <span class="o">=</span> <span class="p">[</span><span class="n">SomeClass</span> <span class="n">new</span><span class="p">];</span> 
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">o</span> <span class="n">name</span><span class="p">]);</span> <span class="p">[</span><span class="n">o</span> <span class="nl">setName</span><span class="p">:</span><span class="s">@&quot;Jobs&quot;</span><span class="p">];</span> <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">o</span> <span class="n">name</span><span class="p">]);</span> 
 <span class="p">}</span> 
<span class="p">}</span></code></pre></div>


<p>3.交换方法
主要使用</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="n">class_getInstanceMethod</span><span class="p">()</span></code></pre></div>


<p>获取Method实例,然后通过</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="n">class_addMethod</span><span class="err">和</span><span class="n">class_replaceMethod</span><span class="err">，</span><span class="n">method_exchangeImplementations</span><span class="p">()</span></code></pre></div>


<p>方法来进行实现</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">+(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">swizzleMethod:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">origSelector</span> <span class="nf">withMethod:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">newSelector</span>
<span class="p">{</span>
<span class="n">Method</span> <span class="n">origMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span><span class="n">origSelector</span><span class="p">);</span>
<span class="n">Method</span> <span class="n">newMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span><span class="n">newSelector</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span><span class="n">origMethod</span> <span class="o">&amp;&amp;</span> <span class="n">newMethod</span><span class="p">)</span>
<span class="p">{</span>
<span class="k">if</span><span class="p">(</span><span class="n">class_addMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span><span class="n">origSelector</span><span class="p">,</span><span class="n">method_getImplementation</span><span class="p">(</span><span class="n">newMethod</span><span class="p">),</span><span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">newMethod</span><span class="p">)))</span>
<span class="p">{</span>
<span class="n">class_replaceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span><span class="n">newSelector</span><span class="p">,</span><span class="n">method_getImplementation</span><span class="p">(</span><span class="n">origMethod</span><span class="p">),</span><span class="n">methodGetTypeEncoding</span><span class="p">(</span><span class="n">origMethod</span><span class="p">));</span>
<span class="p">}</span><span class="k">else</span>
<span class="p">{</span>
<span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">oriMethod</span><span class="p">,</span><span class="n">newMethod</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">return</span> <span class="nb">YES</span> <span class="p">;</span>
<span class="p">}</span>
<span class="k">return</span> <span class="nb">NO</span> <span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>然后实现该类的+load方法 再里面调用</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="o">+</span><span class="p">(</span><span class="n">load</span><span class="p">){</span>
<span class="p">[</span><span class="nb">self</span> <span class="nl">swizzleMethod</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">sendEvent</span><span class="p">:)</span> <span class="nl">withMethod</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">swizzledSendEvent</span><span class="p">)];</span>
<span class="p">}</span></code></pre></div>



]]></content>
  </entry>
  
</feed>
