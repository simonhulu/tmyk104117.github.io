<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Developer Path]]></title>
  <link href="http://tmyk104117.github.io/atom.xml" rel="self"/>
  <link href="http://tmyk104117.github.io/"/>
  <updated>2015-12-31T17:57:44+08:00</updated>
  <id>http://tmyk104117.github.io/</id>
  <author>
    <name><![CDATA[张诗杰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OC 运行时相关知识]]></title>
    <link href="http://tmyk104117.github.io/blog/2015/12/31/post-title/"/>
    <updated>2015-12-31T16:08:53+08:00</updated>
    <id>http://tmyk104117.github.io/blog/2015/12/31/post-title</id>
    <content type="html"><![CDATA[<p>1.动态添加方法到某个类
1.1 首选创建一个IMP
例如:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">UIColor</span> <span class="o">*</span> <span class="n">tttttttt</span><span class="p">(</span><span class="nb">id</span> <span class="nb">self</span><span class="p">,</span><span class="no">SEL</span> <span class="n">cmd</span><span class="p">,</span><span class="no">NSString</span> <span class="o">*</span><span class="n">str</span><span class="p">){</span>
    <span class="no">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s2">&quot;%@&quot;</span><span class="p">,</span><span class="n">str</span><span class="p">);</span>
    <span class="k">return</span> <span class="o">[</span><span class="no">UIColor</span> <span class="n">whiteColor</span><span class="o">]</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>1.2 首先获得Class实例</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Class</span> <span class="n">newClass</span> <span class="o">=</span> <span class="nl">NSClassFromString</span><span class="p">:(</span><span class="err">@</span><span class="s">&quot;NSColor&quot;</span><span class="p">);</span></code></pre></div>


<p>1.3 运行class_addMethod方法</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">class_addMethod</span><span class="p">(</span><span class="n">newClass</span><span class="p">,</span><span class="err">@</span><span class="n">selector</span><span class="p">(</span><span class="nl">testMethod</span><span class="p">:),(</span><span class="n">IMP</span><span class="p">)</span><span class="n">ttt</span><span class="p">,</span><span class="s">&quot;@@:&quot;</span><span class="p">);</span>
<span class="n">id</span> <span class="n">instance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">newClass</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithDomain</span><span class="p">:</span><span class="err">@</span><span class="s">&quot;some domain&quot;</span> <span class="nl">code</span><span class="p">:</span><span class="mi">0</span> <span class="nl">userInfo</span><span class="p">:</span><span class="n">nil</span><span class="p">];</span>
<span class="n">UIColor</span> <span class="o">*</span><span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="n">instance</span> <span class="nl">performSelector</span><span class="p">:</span><span class="err">@</span><span class="n">selector</span><span class="p">(</span><span class="nl">testMetaClass</span><span class="p">:)</span> <span class="nl">withObject</span><span class="p">:</span><span class="err">@</span><span class="s">&quot;1231111111111&quot;</span><span class="p">];</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;%@&quot;</span><span class="p">,</span><span class="n">color</span><span class="p">);</span></code></pre></div>


<p>2.动态添加属性
2.1如果实现了NSKeyValueCoding 协议可以使用
[setValue:id obj forUndefinedKey:id key]和[valueForUndefinedKey:id key]配合使用
2.2使用 objc_getAssociatedObject
运行时方法，通常添加一个category来添加
@implementation NSObject
(ExampleCategoryWithProperty) @dynamic objectTag; - (id)objectTag {
return objc_getAssociatedObject(self, ObjectTagKey); } -
(void)setObjectTag:(id)newObjectTag {
objc_setAssociatedObject(self, ObjectTagKey,
newObject,OBJC_ASSOCIATION_RETAIN_NONATOMIC); }
2.3
因为运行时不能添加实例变量,如果你有添加实例变量 可以这么做</p>

<h1>include</h1>

<h1>import</h1>

<p>@interface SomeClass : NSObject {
 NSString <em><em>privateName;
}
@end
@implementation SomeClass
- (id)init {
 self = [super init];
 if (self) </em>privateName = @&ldquo;Steve&rdquo;;
  return self;
}
@end
NSString </em>nameGetter(id self, SEL <em>cmd) {
 Ivar ivar = class_getInstanceVariable([SomeClass class], &ldquo;</em>privateName&rdquo;);
 return object_getIvar(self, ivar);
}
 void nameSetter(id self, SEL <em>cmd, NSString *newName) {
 Ivar ivar = class_getInstanceVariable([SomeClass class], &ldquo;</em>privateName&rdquo;);
 id oldName = object_getIvar(self, ivar);
 if (oldName != newName) object_setIvar(self, ivar, [newName copy]);
 }
 int main(void) {
 @autoreleasepool {
 objc_property_attribute_t type = { &ldquo;T&rdquo;, &ldquo;@"NSString&rdquo;&ldquo; };
 objc_property_attribute_t ownership = { "C&rdquo;, &ldquo;&rdquo; }; // C = copy
 objc_property_attribute_t backingivar = { &ldquo;V&rdquo;, &ldquo;_privateName&rdquo; };
 objc_property_attribute_t attrs[] = { type, ownership, backingivar }; class_addProperty([SomeClass class], &ldquo;name&rdquo;, attrs, 3);
class_addMethod([SomeClass class], @selector(name), (IMP)nameGetter, &ldquo;@@:&rdquo;); class_addMethod([SomeClass class], @selector(setName:), (IMP)nameSetter, &ldquo;v@:@&rdquo;);
id o = [SomeClass new];
NSLog(@&ldquo;%@&rdquo;, [o name]); [o setName:@&ldquo;Jobs&rdquo;]; NSLog(@&ldquo;%@&rdquo;, [o name]);
 }
}
3.交换方法
主要使用class_getInstanceMethod()获取Method实例,然后通过class_addMethod和class_replaceMethod，method_exchangeImplementations()方法来进行实现
+(BOOL)swizzleMethod:(SEL)origSelector withMethod:(SEL)newSelector
{
Method origMethod = class_getInstanceMethod(self,origSelector);
Method newMethod = class_getInstanceMethod(self,newSelector);
if(origMethod &amp;&amp; newMethod)
{
if(class_addMethod(self,origSelector,method_getImplementation(newMethod),method_getTypeEncoding(newMethod)))
{
class_replaceMethod(self,newSelector,method_getImplementation(origMethod),methodGetTypeEncoding(origMethod));
}else
{
method_exchangeImplementations(oriMethod,newMethod);
}
return YES ;
}
return NO ;
}
然后实现该类的+load方法 再里面调用
+(load){
[self swizzleMethod:@selector(sendEvent:) withMethod:@selector(swizzledSendEvent)];
}</p>
]]></content>
  </entry>
  
</feed>
