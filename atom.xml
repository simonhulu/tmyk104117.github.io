<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Developer Path]]></title>
  <link href="http://tmyk104117.github.io/atom.xml" rel="self"/>
  <link href="http://tmyk104117.github.io/"/>
  <updated>2015-12-31T16:40:11+08:00</updated>
  <id>http://tmyk104117.github.io/</id>
  <author>
    <name><![CDATA[张诗杰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OC 运行时相关知识]]></title>
    <link href="http://tmyk104117.github.io/blog/2015/12/31/post-title/"/>
    <updated>2015-12-31T16:08:53+08:00</updated>
    <id>http://tmyk104117.github.io/blog/2015/12/31/post-title</id>
    <content type="html"><![CDATA[<p>1.动态添加方法到某个类
1.1 首选创建一个IMP
例如:
UIColor * ttt(id self,SEL cmd,NSString <em>str){
NSLog(@&ldquo;%@&rdquo;,str);
return [UIColor whiteColor];
}
1.2 首先获得Class实例
Class newClass = NSClassFromString:(@&ldquo;NSColor&rdquo;);
1.3 运行class_addMethod方法
class_addMethod(newClass,@selector(testMethod:),(IMP)ttt,&ldquo;@@:&rdquo;);
id instance = [[newClass alloc]initWithDomain:@&ldquo;some domain&rdquo; code:0 userInfo:nil];
UIColor </em>color = [instance performSelector:@selector(testMetaClass:) withObject:@&ldquo;1231111111111&rdquo;];
    NSLog(@&ldquo;%@&rdquo;,color);
2.动态添加属性
2.1如果实现了NSKeyValueCoding 协议可以使用
[setValue:id obj forUndefinedKey:id key]和[valueForUndefinedKey:id key]配合使用
2.2使用 objc_getAssociatedObject
运行时方法，通常添加一个category来添加
@implementation NSObject
(ExampleCategoryWithProperty) @dynamic objectTag; - (id)objectTag {
return objc_getAssociatedObject(self, ObjectTagKey); } -
(void)setObjectTag:(id)newObjectTag {
objc_setAssociatedObject(self, ObjectTagKey,
newObject,OBJC_ASSOCIATION_RETAIN_NONATOMIC); }
2.3
因为运行时不能添加实例变量,如果你有添加实例变量 可以这么做</p>

<h1>include</h1>

<h1>import</h1>

<p>@interface SomeClass : NSObject {
 NSString <em><em>privateName;
}
@end
@implementation SomeClass
- (id)init {
 self = [super init];
 if (self) </em>privateName = @&ldquo;Steve&rdquo;;
  return self;
}
@end
NSString </em>nameGetter(id self, SEL <em>cmd) {
 Ivar ivar = class_getInstanceVariable([SomeClass class], &ldquo;</em>privateName&rdquo;);
 return object_getIvar(self, ivar);
}
 void nameSetter(id self, SEL <em>cmd, NSString *newName) {
 Ivar ivar = class_getInstanceVariable([SomeClass class], &ldquo;</em>privateName&rdquo;);
 id oldName = object_getIvar(self, ivar);
 if (oldName != newName) object_setIvar(self, ivar, [newName copy]);
 }
 int main(void) {
 @autoreleasepool {
 objc_property_attribute_t type = { &ldquo;T&rdquo;, &ldquo;@"NSString&rdquo;&ldquo; };
 objc_property_attribute_t ownership = { "C&rdquo;, &ldquo;&rdquo; }; // C = copy
 objc_property_attribute_t backingivar = { &ldquo;V&rdquo;, &ldquo;_privateName&rdquo; };
 objc_property_attribute_t attrs[] = { type, ownership, backingivar }; class_addProperty([SomeClass class], &ldquo;name&rdquo;, attrs, 3);
class_addMethod([SomeClass class], @selector(name), (IMP)nameGetter, &ldquo;@@:&rdquo;); class_addMethod([SomeClass class], @selector(setName:), (IMP)nameSetter, &ldquo;v@:@&rdquo;);
id o = [SomeClass new];
NSLog(@&ldquo;%@&rdquo;, [o name]); [o setName:@&ldquo;Jobs&rdquo;]; NSLog(@&ldquo;%@&rdquo;, [o name]);
 }
}
3.交换方法
主要使用class_getInstanceMethod()获取Method实例,然后通过class_addMethod和class_replaceMethod，method_exchangeImplementations()方法来进行实现
+(BOOL)swizzleMethod:(SEL)origSelector withMethod:(SEL)newSelector
{
Method origMethod = class_getInstanceMethod(self,origSelector);
Method newMethod = class_getInstanceMethod(self,newSelector);
if(origMethod &amp;&amp; newMethod)
{
if(class_addMethod(self,origSelector,method_getImplementation(newMethod),method_getTypeEncoding(newMethod)))
{
class_replaceMethod(self,newSelector,method_getImplementation(origMethod),methodGetTypeEncoding(origMethod));
}else
{
method_exchangeImplementations(oriMethod,newMethod);
}
return YES ;
}
return NO ;
}
然后实现该类的+load方法 再里面调用
+(load){
[self swizzleMethod:@selector(sendEvent:) withMethod:@selector(swizzledSendEvent)];
}</p>
]]></content>
  </entry>
  
</feed>
